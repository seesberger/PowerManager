local image = require("image")
local GUI = require("GUI")
local component = require("component")

backgroundColor = 0x0F0F0F
controlButtonConfig = {
    --absolute position of the button array
    position = { 1, 1},
    --padding of the individual buttons
    padding = { 2, 1},

    buttons = {
        shutdown = {
            idleColor = 0x0000BB,
            pressedColor = 0x00000B,
            textColor = 0xFFFFFF,
            text = "Reboot",
            onTouch = function()
                os.execute("Reboot")
            end
        },
        exitGui = {
            idleColor = 0xBB0000,
            pressedColor = 0x0B0000,
            textColor = 0xFFFFFF,
            text = "Exit to shell",
            onTouch = function()
                os.exit()
            end
        },
        restartGui = {
            idleColor = 0x01FF00,
            pressedColor = 0x0B0B0B,
            textColor = 0x0F0F0F,
            text = "Restart Program",
            onTouch = function()
                os.execute("short")
                os.exit()
            end
        }
        --[[
        template = {
            idleColor = 0xFFFFFF,
            pressedColor = 0xBBBBBB,
            textColor = 0x0F0F0F,
            text = "Template",
            onTouch = function()
                --do stuff
            end
        }
        ]]
    }
}
controlButtons = {}
function createControlButtons(application, config)
    config = config or controlButtonConfig
    local previousButtonLength = 0
    for i, button in pairs(config.buttons) do
        object = application:addChild(GUI.adaptiveButton( 
            previousButtonLength + config.position[1],
            config.position[2],
            config.padding[1],
            config.padding[2],
            button.idleColor,
            button.textColor, 
            button.pressedColor, 
            button.textColor, 
            button.text
            ))
        object.onTouch = button.onTouch
        table.insert(controlButtons, object)
        previousButtonLength = previousButtonLength + #button.text + 2*config.padding[1]
    end
end

local application = GUI.application()

-- Whole Screen application
application:addChild(GUI.panel(1, 1, application.width, application.height, backgroundColor))

createControlButtons(application)

function getCells()
    local countTEcell = 0
    local countRfTCell = 0
  
    local TEcell = component.list( "energy_device" )
    local RfTCell = component.list("rftools_powercell")
  
    local cellsID = {}
    
    for address, name in pairs(TEcell) do
      countTEcell =  countTEcell + 1
      if countTEcell > 1 then
        cellsID[address] = "TE Zelle".." "..countTEcell
      else
        cellsID[address] = "TE Zelle"
      end
    end
  
    for address, name in pairs(RfTCell) do
      countRfTCell = countRfTCell + 1
      if countRfTCell > 1 then
        cellsID[address] = "RfT Zelle".." "..countRfTCell
      else
        cellsID[address] = "RfT Zelle"
      end
    end 
    return cellsID
end

function getTotal()
    local totalPower = 0
    local totalMaxPower = 0
    local cellid = getCells()
    for address, name in pairs(cellid) do
      local cell = component.proxy( address )
      totalPower = totalPower + cell.getEnergyStored()
      totalMaxPower = totalMaxPower + cell.getMaxEnergyStored()
    end
    return totalPower, totalMaxPower
end

function getCellPercentage(cell)
    val = (cell.getEnergyStored() * 100) / cell.getMaxEnergyStored()
    return val
end

cellsProgressBars = {}
function drawCellsAsContent(obj)
    for address, name in pairs(getCells()) do
        local cell = component.proxy( address )
        progressbar = obj:addChild(GUI.progressBar(1, 1, obj.width - 2, 0x3366CC, 0xEEEEEE, 0x000000, getCellPercentage(cell) , true, true, name, " RF"))
        table.insert(cellsProgressBars, progressbar)
    end
end
local progressbars = application:addChild(GUI.titledWindow(50, 10, 40, 30, "-Cells", true))
drawCellsAsContent(progressbars)
-- First, add an empty window to application
local window1 = application:addChild(GUI.window(90, 6, 60, 20))
-- Add a background panel and text widget to it
window1:addChild(GUI.panel(1, 1, window1.width, window1.height, 0xF0F0F0))
window1:addChild(GUI.text(2, 3, 0x2D2D2D, "Hier k√∂nnte Ihre Werbung stehen!"))
progressbar = window1:addChild(GUI.progressBar(1, 1, window1.width, 0x3366CC, 0xEEEEEE, 0x000000, 50, true, true, "Fick-Dich-Meter: ", ""))

-- titled window
local window3 = application:addChild(GUI.titledWindow(50, 22, 60, 20, "-Change content of other window", true))
-- Attach an single cell layout to it
local layout = window3:addChild(GUI.layout(1, 2, window3.width, window3.height - 1, 1, 1))
-- Add some stuff to layout
higherButton = layout:addChild(GUI.button(1, 1, 50, 3, 0xB4B4B4, 0xFFFFFF, 0x969696, 0xB4B4B4, "+++"))
lowerButton = layout:addChild(GUI.button(1, 1, 50, 3, 0xB4B4B4, 0xFFFFFF, 0x969696, 0xB4B4B4, "---"))
inputField = layout:addChild(GUI.input(2, 2, 30, 3, 0xB4B4B4, 0x555555, 0x999999, 0xFFFFFF, 0x2D2D2D, "Saftiger Saft", "Input"))

application:draw(true)
application:start()
print("Halted Desktop")